#!/bin/bash -eu

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

payload=$(mktemp)
cat >"$payload" <&0

cd "$source"

api="$(jq -r '.source.api // "http://aptly:8080/api"' < "$payload")"

aptly_repo="$(jq -r '.params.aptly_repo // ""' < "$payload")"
publish_dist="$(jq -r '.params.publish_dist // ""' < "$payload")"
publish_endpoint="$(jq -r '.params.publish_endpoint // "filesystem:public:"' < "$payload")"
publish_prefix="$(jq -r '.params.publish_prefix // "."' < "$payload")"
upload="$(jq -r '.params.upload // "pkg"' < "$payload")"

[[ -z "$aptly_repo" ]] && {
  echo "Must provide local Aptly repo to add packages to."
  exit 1
}
[[ -z "$publish_dist" ]] && {
  echo "Must provide distribution to publish to."
  exit 1
}

files=( "$upload"/*.deb )
version="$(dpkg -f "${files[0]}" Version)"
package="$(dpkg -f "${files[0]}" Source)"

find "$upload" -maxdepth 1 \( -name '*.deb' -o -name '*.dsc' -o -name '*.changes' -o -name '*.tar.gz' -o -name '*.build' \) \
  -exec curl -sf -XPOST -F "file=@{}" "$api/files/$version" \;
echo

echo "Listing uploaded files for confirmation."
curl -sf "$api/files/$version" | jq '.'

echo "Adding new files to $publish_dist."
curl -sf -XPOST "$api/repos/$aptly_repo/file/$version" | jq '.'

echo "Publishing updated repository."
curl -sf -XPUT "$api/publish/${publish_endpoint}${publish_prefix}/${publish_dist}" | jq '.'

echo "Deleting uploaded files."
curl -sf -XDELETE "$api/files/$version" | jq '.'

jq -n "{
  version: { ref: \"$version\" },
  metadata: [
    { name: \"package\", value: \"$package\" }
  ]
}" >&3


